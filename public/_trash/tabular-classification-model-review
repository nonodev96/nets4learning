useEffect(() => {
  console.debug('useEffect [progress]')
  const interval = setInterval(() => {
    if (progress < 90) {
      setProgress(progress + 10)
    } else {
      clearInterval(interval)
    }
  }, 50)
  return () => clearInterval(interval)
}, [progress])

  const [filesUpload, setFilesUpload] = useState(true)

  const [files, setFiles] = useState({
    binary: null, json: null, csv: null,
  })

  const handleClick_LoadModel = async () => {
    // TODO
    // necesita ser mejorado
    if (files.json === null || files.binary === null) {
      await alertHelper.alertError(`Debes subir los ficheros JSON y binario`)
      return
    }
    try {
      const loadedModel = await tfjs.loadLayersModel(tfjs.io.browserFiles([files.json, files.binary]), {
        onProgress: (fraction) => {
          console.log('loadLayersModel', { fraction })
        },
      })
      setModel(loadedModel)
      setIsLoading(false)
      setIsButtonDisabled(false)
      await alertHelper.alertSuccess(t('model-loaded-successfully'))
    } catch (error) {
      console.error(error)
    }
  }


  const handleFileUpload_CSV = (uploadedFiles) => {
    setFiles((prevState) => {
      return {
        ...prevState,
        csv: new File([uploadedFiles[0]], uploadedFiles[0].name, { type: uploadedFiles[0].type }),
      }
    })
    const reader = new FileReader()
    reader.readAsText(files.csv)

    reader.onload = function ($event) {
      const csv = $event.target.result
      const lines = csv.split('\n')
      const _head = lines[0].split(',')
      const _body = []
      for (let row_i = 1; row_i < lines.length; row_i++) {
        const new_row = []
        const row = lines[row_i].split(',')
        for (let col_i = 0; col_i < row.length; col_i++) {
          new_row.push(row[col_i])
        }
        _body.push(new_row)
      }

      setTableHead(_head)
      setTableBody(_body)
    }
  }

  const handleFileUpload_JSON = (uploadedFiles) => {
    setFiles((prevState) => {
      return {
        ...prevState,
        json: new File([uploadedFiles[0]], uploadedFiles[0].name, { type: uploadedFiles[0].type }),
      }
    })
    setFilesUpload(files.json === null || files.binary === null)
  }

  const handleFileUpload_Binary = (uploadedFiles) => {
    setFiles((prevState) => {
      return {
        ...prevState,
        binary: new File([uploadedFiles[0]], uploadedFiles[0].name, { type: uploadedFiles[0].type }),
      }
    })
    setFilesUpload(files.json === null || files.binary === null)
  }


<>
  {/*TODO*/}
  <Card.Subtitle className="mb-3 text-muted">
    <Trans i18nKey={'pages.playground.0-tabular-classification.0_upload.upload-your-model'} />
  </Card.Subtitle>
  <Card.Text>
    <Trans i18nKey={'pages.playground.0-tabular-classification.0_upload.upload-your-model-description'} />
  </Card.Text>
  <Row>
    <Col xs={12} sm={12} md={12} lg={12} xl={12} xxl={12}>
      <DragAndDrop name={'json'}
                   id={'json-upload'}
                   accept={{ 'application/json': ['.json'] }}
                   text={t('drag-and-drop.json')}
                   labelFiles={t('drag-and-drop.label-files-one')}
                   function_DropAccepted={handleFileUpload_JSON}
      />
    </Col>
    <Col xs={12} sm={12} md={12} lg={12} xl={12} xxl={12}>
      <DragAndDrop name={'bin'}
                   id={'weights-upload'}
                   accept={{ 'application/octet-stream': ['.bin'] }}
                   text={t('drag-and-drop.binary')}
                   labelFiles={t('drag-and-drop.label-files-one')}
                   function_DropAccepted={handleFileUpload_Binary}
      />
    </Col>
    <Col xs={12} sm={12} md={12} lg={12} xl={12} xxl={12}>
      <div className="d-grid gap-2">
        <Button variant={'primary'} size={'lg'} type={'button'} disabled={filesUpload} onClick={handleClick_LoadModel}>
          <Trans i18nKey={''} />
        </Button>
      </div>
    </Col>
    <Col xs={12} sm={12} md={12} lg={12} xl={12} xxl={12} className={'mt-3'}>
      <DragAndDrop name={'csv'}
                   id={'dataset-upload'}
                   accept={{ 'text/csv': ['.csv'] }}
                   text={t('drag-and-drop.csv')}
                   labelFiles={t('drag-and-drop.label-files-one')}
                   function_DropAccepted={handleFileUpload_CSV}
      />
    </Col>
  </Row>
</>